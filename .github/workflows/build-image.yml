name: Build Image

on:
  push:
    branches: [master, main]
    paths:
      - 'build-image/**'
      - '.github/workflows/build-image.yml'
  pull_request:
    branches: [master, main]
    paths:
      - 'build-image/**'
      - '.github/workflows/build-image.yml'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: quay.io
  IMAGE_NAME: cortexproject/build-image

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_REGISTRY_USER }}
          password: ${{ secrets.QUAY_REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,enable={{is_default_branch}},prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./build-image
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Security features
          provenance: true
          sbom: true

      - name: Generate attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  # Test the build image
  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Test build image functionality
        run: |
          # Test that the build image contains expected tools
          docker run --rm ${{ needs.build.outputs.image-tag }} which go
          docker run --rm ${{ needs.build.outputs.image-tag }} which make
          docker run --rm ${{ needs.build.outputs.image-tag }} which git
          
          # Test Go version
          docker run --rm ${{ needs.build.outputs.image-tag }} go version

  push:
    needs: build
    if: (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')) && github.repository == 'cortexproject/cortex'
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        name: Checkout
        with:
          fetch-depth: 0

      - name: Download Docker Images Artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: build-image

      - name: Load image
        run: make load-multiarch-build-image

      - name: Login to Quay.io
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: quay.io
          username: ${{secrets.QUAY_REGISTRY_USER}}
          password: ${{secrets.QUAY_REGISTRY_PASSWORD}}

      - name: Push image
        run: make push-multiarch-build-image
